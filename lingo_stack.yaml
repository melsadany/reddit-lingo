---
Description: CloudFormation template for creating an ec2 instance
Parameters:
  KeyName:
    Description: Key Pair name
    Type: AWS::EC2::KeyPair::KeyName
    Default: xxx-xxx
  VPC:
    Type: AWS::EC2::VPC::Id
    Default: givevpcid
  Subnet1ForLoadBalancer:
    Type: AWS::EC2::Subnet::Id
    Default: givesubnetid
  Subnet2ForLoadBalancer:
    Type: AWS::EC2::Subnet::Id
    Default: givesubnetid
  InstanceType:
    Description: Select one of the possible instance types
    Type: String
    Default: t2.micro
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Default: givesecuritygroupid
  ImageID:
    Type: AWS::EC2::Image::Id
    Default: ami-0de53d8956e8dcf80
Resources:

# RecordSet:
#   Type: AWS::Route53::RecordSet
#   Properties:
#     AliasTarget:
#       AliasTarget
#     Comment: String
#     Failover: String
#     GeoLocation:
#       GeoLocation
#     HealthCheckId: String
#     HostedZoneId: String
#     HostedZoneName: String
#     MultiValueAnswer: Boolean
#     Name: String
#     Region: String
#     ResourceRecords:
#       - String
#     SetIdentifier: String
#     TTL: String
#     Type: String
#     Weight: Integer
  IamInstanceProfileForServer:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - ec2tos3
      InstanceProfileName: ServerInstanceProfile
  Server:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref:
          IamInstanceProfileForServer
      ImageId:
        Ref: ImageID
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      SecurityGroupIds:
      - Ref: SecurityGroup
      SubnetId:
        Ref: Subnet1ForLoadBalancer
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash -xe
            sudo yum update -y
            sudo yum install git -y
            sudo curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.34.0/install.sh | bash
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
            nvm install 10
            node --version
            curl --silent --location https://dl.yarnpkg.com/rpm/yarn.repo | sudo tee /etc/yum.repos.d/yarn.repo
            curl --silent --location https://rpm.nodesource.com/setup_10.x | bash -
            sudo yum install yarn -y
            cd /home/ec2-user
            sudo aws s3 cp s3://screener2builds/ . --recursive
            sudo yarn && nohup yarn start &
  LingoLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: LingoLoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - Ref: SecurityGroup
      Subnets:
        - Ref: Subnet1ForLoadBalancer
          Ref: Subnet2ForLoadBalancer
      Tags:
        - Resource Tag
      Type: application
  ListenerForBalancer:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      # Certificates:
      #   - Certificate
      DefaultActions:
        - Action
      LoadBalancerArn:
        Ref: LingoLoadBalancer
      Port: 80
      Protocol: HTTP
      # SslPolicy: String
Outputs:
  PublicName:
    Value:
      Fn::GetAtt:
      - Server
      - PublicDnsName
    Description: Public name (connect via SSH)
